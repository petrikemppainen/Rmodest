i <- 1
inp <- suppressWarnings(readLines(input.files[i]))
rstarts <- grep("Locus",inp)+1
Npop <- as.numeric(gsub(" populations assumed", "", inp[grep(" populations assumed",inp)]))
Npop
Npop>1
for(i in 1:length(input.files)){
inp <- suppressWarnings(readLines(input.files[i]))
rstarts <- grep("Locus",inp)+1
Npop <- as.numeric(gsub(" populations assumed", "", inp[grep(" populations assumed",inp)]))
if(Npop>1){
out.temp <- as.list(rep(NA, length(rstarts)))
for(j in 1:length(rstarts)){
temp <- do.call('rbind', strsplit(inp[(rstarts[j]+2):(rstarts[j]+1+Nalleles[j])], " ", fixed=TRUE))
temp <- temp[,(ncol(temp)-Npop+1):ncol(temp)]
if(is.vector(temp)){
temp <- as.numeric(temp)
}else{temp <- apply(temp, 2, as.numeric)}
out.temp[[j]] <- list(as.numeric(gsub("% missing data", "", inp[rstarts[j]+1])), temp)
}
out[[i]] <- out.temp
}else{
out[[i]] <- "one_pop"
one_pop <- c(one_pop, i)
}
}
out[[i]]
input.data.folder <- "/Users/petrikemppainen/Desktop/Git/input8_locprior"
if(read.fwf(textConnection(input.data.folder), widths=c(nchar(input.data.folder)-1, nchar(input.data.folder)))[2] != "/"){
input.data.folder <- paste(input.data.folder, "/", sep="")
}
# end check format
input.files <- paste(input.data.folder, list.files(input.data.folder),sep="")
input.files
out <- list()
inp <- suppressWarnings(readLines(input.files[1]))
inp
Nind <- as.numeric(gsub(" individuals", "", inp[grep(" individuals",inp)][1]))
Nind
rstarts <- grep("Locus",inp)+1
rstarts
Nalleles <- as.numeric(gsub(" alleles", "",inp[rstarts]))
Nalleles
one_pop <- NULL
one_pop
i <- 1
inp <- suppressWarnings(readLines(input.files[i]))
inp
out[[i]]
out
for(i in 1:length(input.files)){
inp <- suppressWarnings(readLines(input.files[i]))
rstarts <- grep("Locus",inp)+1
Npop <- as.numeric(gsub(" populations assumed", "", inp[grep(" populations assumed",inp)]))
if(Npop>1){
out.temp <- as.list(rep(NA, length(rstarts)))
for(j in 1:length(rstarts)){
temp <- do.call('rbind', strsplit(inp[(rstarts[j]+2):(rstarts[j]+1+Nalleles[j])], " ", fixed=TRUE))
temp <- temp[,(ncol(temp)-Npop+1):ncol(temp)]
if(is.vector(temp)){
temp <- as.numeric(temp)
}else{temp <- apply(temp, 2, as.numeric)}
out.temp[[j]] <- list(as.numeric(gsub("% missing data", "", inp[rstarts[j]+1])), temp)
}
out[[i]] <- out.temp
}else{
out[[i]] <- "one_pop"
one_pop <- c(one_pop, i)
}
}
out
allele_counts <- do.call('cbind', lapply(out[-one_pop], function(y) do.call('rbind', lapply(y, function(x) round(x[[2]]*Nind*x[[1]]/100*2)))))
colnames(allele_counts) <- c(1:ncol(allele_counts))
rownames(allele_counts) <- rep(1:length(Nalleles), Nalleles)
allele_counts
input.data.folder <- "/Users/petrikemppainen/Desktop/Git/MCMVf"
if(read.fwf(textConnection(input.data.folder), widths=c(nchar(input.data.folder)-1, nchar(input.data.folder)))[2] != "/"){
input.data.folder <- paste(input.data.folder, "/", sep="")
}
# end check format
input.files <- paste(input.data.folder, list.files(input.data.folder),sep="")
out <- list()
inp <- suppressWarnings(readLines(input.files[1]))
Nind <- as.numeric(gsub(" individuals", "", inp[grep(" individuals",inp)][1]))
rstarts <- grep("Locus",inp)+1
Nalleles <- as.numeric(gsub(" alleles", "",inp[rstarts]))
one_pop <- NULL
# get allele frequencies
i <- 1
for(i in 1:length(input.files)){
inp <- suppressWarnings(readLines(input.files[i]))
rstarts <- grep("Locus",inp)+1
Npop <- as.numeric(gsub(" populations assumed", "", inp[grep(" populations assumed",inp)]))
if(Npop>1){
out.temp <- as.list(rep(NA, length(rstarts)))
for(j in 1:length(rstarts)){
temp <- do.call('rbind', strsplit(inp[(rstarts[j]+2):(rstarts[j]+1+Nalleles[j])], " ", fixed=TRUE))
temp <- temp[,(ncol(temp)-Npop+1):ncol(temp)]
if(is.vector(temp)){
temp <- as.numeric(temp)
}else{temp <- apply(temp, 2, as.numeric)}
out.temp[[j]] <- list(as.numeric(gsub("% missing data", "", inp[rstarts[j]+1])), temp)
}
out[[i]] <- out.temp
}else{
out[[i]] <- "one_pop"
one_pop <- c(one_pop, i)
}
}
out
allele_counts <- do.call('cbind', lapply(out[-one_pop], function(y) do.call('rbind', lapply(y, function(x) round(x[[2]]*Nind*x[[1]]/100*2)))))
colnames(allele_counts) <- c(1:ncol(allele_counts))
rownames(allele_counts) <- rep(1:length(Nalleles), Nalleles)
allele_counts
input.data.folder <- "/Users/petrikemppainen/Desktop/Git/input8_locprior"
if(read.fwf(textConnection(input.data.folder), widths=c(nchar(input.data.folder)-1, nchar(input.data.folder)))[2] != "/"){
input.data.folder <- paste(input.data.folder, "/", sep="")
}
# end check format
input.files <- paste(input.data.folder, list.files(input.data.folder),sep="")
out <- list()
inp <- suppressWarnings(readLines(input.files[1]))
Nind <- as.numeric(gsub(" individuals", "", inp[grep(" individuals",inp)][1]))
rstarts <- grep("Locus",inp)+1
Nalleles <- as.numeric(gsub(" alleles", "",inp[rstarts]))
one_pop <- NULL
# get allele frequencies
i <- 1
for(i in 1:length(input.files)){
inp <- suppressWarnings(readLines(input.files[i]))
rstarts <- grep("Locus",inp)+1
Npop <- as.numeric(gsub(" populations assumed", "", inp[grep(" populations assumed",inp)]))
if(Npop>1){
out.temp <- as.list(rep(NA, length(rstarts)))
for(j in 1:length(rstarts)){
temp <- do.call('rbind', strsplit(inp[(rstarts[j]+2):(rstarts[j]+1+Nalleles[j])], " ", fixed=TRUE))
temp <- temp[,(ncol(temp)-Npop+1):ncol(temp)]
if(is.vector(temp)){
temp <- as.numeric(temp)
}else{temp <- apply(temp, 2, as.numeric)}
out.temp[[j]] <- list(as.numeric(gsub("% missing data", "", inp[rstarts[j]+1])), temp)
}
out[[i]] <- out.temp
}else{
out[[i]] <- "one_pop"
one_pop <- c(one_pop, i)
}
}
out
out[[1]]
out[[2]]
out[[10]]
out[[8]]
out[[5]]
modest$K
out[[523]]
input.files
1:length(input.files)
length(out)
225/5
out[[225]]
out[[225]]
out[[226]]
out[[225]]
i <- 225
inp <- suppressWarnings(readLines(input.files[i]))
rstarts <- grep("Locus",inp)+1
Npop <- as.numeric(gsub(" populations assumed", "", inp[grep(" populations assumed",inp)]))
inp
rstarts
Npop
input.files
i <- 225
input.files[i]
i <- 141
inp <- suppressWarnings(readLines(input.files[i]))
rstarts <- grep("Locus",inp)+1
Npop <- as.numeric(gsub(" populations assumed", "", inp[grep(" populations assumed",inp)]))
Npop
Npop>1
out.temp <- as.list(rep(NA, length(rstarts)))
out.temp
for(j in 1:length(rstarts)){
temp <- do.call('rbind', strsplit(inp[(rstarts[j]+2):(rstarts[j]+1+Nalleles[j])], " ", fixed=TRUE))
temp <- temp[,(ncol(temp)-Npop+1):ncol(temp)]
if(is.vector(temp)){
temp <- as.numeric(temp)
}else{temp <- apply(temp, 2, as.numeric)}
out.temp[[j]] <- list(as.numeric(gsub("% missing data", "", inp[rstarts[j]+1])), temp)
}
out.temp
for(i in 1:length(input.files)){
inp <- suppressWarnings(readLines(input.files[i]))
rstarts <- grep("Locus",inp)+1
Npop <- as.numeric(gsub(" populations assumed", "", inp[grep(" populations assumed",inp)]))
if(Npop>1){
out.temp <- as.list(rep(NA, length(rstarts)))
for(j in 1:length(rstarts)){
temp <- do.call('rbind', strsplit(inp[(rstarts[j]+2):(rstarts[j]+1+Nalleles[j])], " ", fixed=TRUE))
temp <- temp[,(ncol(temp)-Npop+1):ncol(temp)]
if(is.vector(temp)){
temp <- as.numeric(temp)
}else{temp <- apply(temp, 2, as.numeric)}
out.temp[[j]] <- list(as.numeric(gsub("% missing data", "", inp[rstarts[j]+1])), temp)
}
out[[i]] <- out.temp
}else{
out[[i]] <- "one_pop"
one_pop <- c(one_pop, i)
}
}
i <- 141
out[[i]]
x <- out[[i]]
x
y <- out[[i]]
y[[1]]
x <- y[[1]]
x[[2]]
Nind
x[[1]]
(1-x[[1]])
library(MODEST)
modest <- importData("/Users/petrikemppainen/Desktop/Git/input8_locprior")
modest$allele_counts
(x[[2]]*Nind*(1-x[[1]])/100*2))))
(x[[2]]*Nind*(1-x[[1]])/100*2)
x
x[[2]]
x[[2]]*Nind*(1-x[[1]])
allele_counts <- do.call('cbind', lapply(out[-one_pop], function(y) do.call('rbind', lapply(y, function(x) round(x[[2]]*Nind*(1-x[[1]])*2)))))
allele_counts
library(MODEST)
modest <- importData("/Users/petrikemppainen/Desktop/Git/input8_locprior")
modest$allele_counts
modest$Qdist_G <- getQdist(modest, method="G_test") # uses allele frequencies to calculate distances between Q-columns which makes more sense that using just the Q-values
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG
plot(graph.edgelist(modest$DAG))
library(MODEST)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$plotDAG
new.order <- plotHist(modest, modest$plotDAG, 3, sort.by=1) # this functions gives the order which can be used to all subsequent plots
new.order <- plotHist(modest, modest$plotDAG, 2, sort.by=1) # this functions gives the order which can be used to all subsequent plots
new.order <- plotHist(modest, modest$plotDAG, 3, sort.by=1) # this functions gives the order which can be used to all subsequent plots
new.order <- plotHist(modest, modest$plotDAG, 4, sort.by=1) # this functions gives the order which can be used to all subsequent plots
new.order <- plotHist(modest, modest$plotDAG, 5, sort.by=1) # this functions gives the order which can be used to all subsequent plots
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="topology", threshold=0.05)
Qdist <- modest$Qdist_G
if(is.na(Qdist[2,1])){
Qdist <- t(Qdist)
}
slink <- as.phylo(hclust(as.dist(Qdist), method="single")) # get slink from distance matrix and parse it to a 'phylo' object
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
plot(slink)
dim(Qdist)
Ntips <- length(slink$tip.label) # number of tips
Nclust <- slink$Nnode # number of clusters
el <- slink$edge # shorter name for the edge list which contains the slink tree structure
### prepare info to be used by the parser
Cl <- lapply((Ntips+1):max(el[,1]), function(x) extract.clade(slink, x)) # a list of all possible sub-cluster from slink using function 'extract.clade' from 'ape' package
Cl <- lapply(Cl, function(x) as.numeric(x$tip.label)) # list with tip labels (Qindex) for each cluster
Cl <- c(1:Ntips, Cl) # now add all tips as well
Cl_K <- lapply(Cl, function(x) K[x]) # List with K:s for each cluster/tip
Cl_minK <- sapply(Cl_K, min) # minimum K for each cluster/tip
Cl_minK_Qcol <- lapply(1:length(Cl), function(x) sort(Cl[[x]][Cl_K[[x]] == Cl_minK[[x]]])) # Q cols that have minK for each cluster; these will be vertices in the DAG
DAG <- matrix(NA, 0, 2) # file to append to
Eindex <- 0
index <- NULL # gives the names for each cluster for which the parser was used
#x <- 360
### The parser
parser <- function(x){
## prepare info
children <- el[,2][el[,1]==x] # get children
children <- children[order(Cl_minK[children])] # order children such that delta K is never negative
# get Ks for children
child1_K <- unlist(Cl_minK[children][1])
child2_K <- unlist(Cl_minK[children][2])
# Do not create edges when K for children is the same, this is the only exception (!)
if(child1_K!=child2_K){
index <<- c(index, x)
# get grandchildren and vertex names
grandChildren1 <- unlist(Cl_minK_Qcol[children[1]])
grandChildren2 <- unlist(Cl_minK_Qcol[children[2]])
child1_names <- grandChildren1
child2_names <- grandChildren2
#two nested functions that create all edges
parseInner <- function(y){
## prepare some info
# get Ks for children
createEdges <- function(x) {
createEdgesInner <- function(y){
from <- child1_names[y]
to <- child2_names[x]
if(diff(c(child1_K, child2_K))==1){ # if delta K ==1
DAG <- rbind(DAG, c(from, to))
}else{ # if delta K >1 create necessary empty vertices
Eindex <<- Eindex-1
DAG <- rbind(DAG, c(Eindex, to))
if(diff(c(child1_K, child2_K))>2){
for(i in 1:(diff(c(child1_K, child2_K))-2)){
DAG <- rbind(DAG, c(Eindex-1, Eindex))
Eindex <<- Eindex-1
}
}
DAG <- rbind(DAG, c(from, Eindex))
}
}
DAG <- rbind(DAG, do.call('rbind', lapply(1:length(child1_names), createEdgesInner)))
return(DAG)
}
DAG <- do.call('rbind', lapply(1:length(child2_names), createEdges))
return(DAG)
}
DAG <- parseInner()
}
}
### now parse
DAGlist <- lapply((Ntips+1):(Ntips+Nclust), parser) # use parser for all clusters
names(DAGlist) <- index # give each object relevant names (equals to node numbers for which the parser was used), used for debugging
DAG <- do.call('rbind', DAGlist) # append
DAG <- DAG[!duplicated(DAG),]
##create root
names <- unlist(Cl[which(K==2)])
DAG <- rbind(DAG, cbind(0, names)) # add root
DAG
plot(graph.edgelist(apply(DAG, 2, as.character)), vertex.label=NA, vertex.size=0.2, edge.arrrow.size=0.2)
plot(graph.edgelist(apply(DAG, 2, as.character)), vertex.label=NA, vertex.size=0.2, edge.arrow.size=0.2)
if(is.na(Qdist[1,2])){
Qdist <- t(Qdist)
}
Qdist[1:5, 1:5]
G_clusters <- list()
for(i in unique(K)){
G_K <- Qdist[K==i, K==i]
g <- graph.adjacency(G_K, mode="upper", diag=FALSE, weighted=TRUE)
g <- delete.edges(g, which(E(g)$weight>threshold))
G_clusters[[i]] <- lapply(decompose.graph(g), function(x) V(x)$name)
}
hist(Qdist)
threshold=0.05
K
modest$K
K <- modest$K
G_clusters <- list()
for(i in unique(K)){
G_K <- Qdist[K==i, K==i]
g <- graph.adjacency(G_K, mode="upper", diag=FALSE, weighted=TRUE)
g <- delete.edges(g, which(E(g)$weight>threshold))
G_clusters[[i]] <- lapply(decompose.graph(g), function(x) V(x)$name)
}
G_clusters
i <- 5
i <- 4
G_K <- Qdist[K==i, K==i]
g <- graph.adjacency(G_K, mode="upper", diag=FALSE, weighted=TRUE)
g <- delete.edges(g, which(E(g)$weight>threshold))
plot(g)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
library("MODEST", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.005)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.0075)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
par(mfcol=c(1,3))
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.025")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.005)
title(main="threshold=0.00125")
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
par(mfcol=c(1,3))
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.025)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.025")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.0125)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.00125")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
par(mfcol=c(1,3))
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.025)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.025")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.002)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.00125")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.025)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.04)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.03)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.02)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
0.01/5
par(mfcol=c(1,3))
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.01")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.002)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.002")
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.002)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.075)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.1)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.2)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.15)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
new.order <- plotHist(modest_MCMV, modest$plotDAG, 4, sort.by=1) # this functions gives the order which can be used to all subsequent plots
new.order <- plotHist(modest_MCMV, modest$plotDAG, 2, sort.by=1) # this functions gives the order which can be used to all subsequent plots
i <- 4
plotHistogram(i, MOD_data, sort.by=new.order)
plotHist(i, MOD_data, sort.by=new.order)
plotHist(i, modest_MCMV, sort.by=new.order)
plotHist(modest_MCMV, modest$plotDAG, i, sort.by=new.order)
infile <- modest$plotDAG
modest <- modest_MCMV
sort.by=new.order
i
vertices <- infile$vertices
K_vertices <- infile$K_vertices
color <- infile$color
Qcols <- modest$Qcols
temp <- do.call('cbind', lapply(vertices[K_vertices==K], function(x) if(length(x)>1) apply(Qcols[,x], 1, sum) else Qcols[,x]))
K <- i
temp <- do.call('cbind', lapply(vertices[K_vertices==K], function(x) if(length(x)>1) apply(Qcols[,x], 1, sum) else Qcols[,x]))
hist.data <- apply(temp, 1, function(x) x/sum(x))
hist.data
t(hist.data)
write.table(t(hist.data), file="MCMV_hist_K4.txt")
temp <- do.call('cbind', lapply(vertices[K_vertices==K], function(x) if(length(x)>1) apply(Qcols[,x], 1, sum) else Qcols[,x]))
hist.data <- apply(temp, 1, function(x) x/sum(x))
hist.data
barplot(hist.data)
barplot(hist.data, col=color)
barplot(hist.data, col=color, border=NA, space=0, axes=FALSE)
modest <- importData("/Users/petrikemppainen/Desktop/Git/input8_locprior")
modest$K
table(modest$K)
library(Rmodest)
library(Rmodest)
library(Rmodest)
roxygen2::roxygenize('.', roclets=c('rd', 'namespace'))
?roxygenize
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
roxygenize()
roxygenize()
library(Rmodest)
roxygenize()
roxygenize()
roxygenize()
roxygenize()
library(Rmodest)
library(Rmodest)
roxygenize()
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
roxygenize()
library("Rmodest", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
