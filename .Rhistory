grandChildren1 <- unlist(Cl_minK_Qcol[children[1]])
grandChildren2 <- unlist(Cl_minK_Qcol[children[2]])
child1_names <- grandChildren1
child2_names <- grandChildren2
#two nested functions that create all edges
parseInner <- function(y){
## prepare some info
# get Ks for children
createEdges <- function(x) {
createEdgesInner <- function(y){
from <- child1_names[y]
to <- child2_names[x]
if(diff(c(child1_K, child2_K))==1){ # if delta K ==1
DAG <- rbind(DAG, c(from, to))
}else{ # if delta K >1 create necessary empty vertices
Eindex <<- Eindex-1
DAG <- rbind(DAG, c(Eindex, to))
if(diff(c(child1_K, child2_K))>2){
for(i in 1:(diff(c(child1_K, child2_K))-2)){
DAG <- rbind(DAG, c(Eindex-1, Eindex))
Eindex <<- Eindex-1
}
}
DAG <- rbind(DAG, c(from, Eindex))
}
}
DAG <- rbind(DAG, do.call('rbind', lapply(1:length(child1_names), createEdgesInner)))
return(DAG)
}
DAG <- do.call('rbind', lapply(1:length(child2_names), createEdges))
return(DAG)
}
DAG <- parseInner()
}
}
### now parse
DAGlist <- lapply((Ntips+1):(Ntips+Nclust), parser) # use parser for all clusters
names(DAGlist) <- index # give each object relevant names (equals to node numbers for which the parser was used), used for debugging
DAG <- do.call('rbind', DAGlist) # append
DAG <- DAG[!duplicated(DAG),]
##create root
names <- unlist(Cl[which(K==2)])
DAG <- rbind(DAG, cbind(0, names)) # add root
DAG
plot(graph.edgelist(apply(DAG, 2, as.character)), vertex.label=NA, vertex.size=0.2, edge.arrrow.size=0.2)
plot(graph.edgelist(apply(DAG, 2, as.character)), vertex.label=NA, vertex.size=0.2, edge.arrow.size=0.2)
if(is.na(Qdist[1,2])){
Qdist <- t(Qdist)
}
Qdist[1:5, 1:5]
G_clusters <- list()
for(i in unique(K)){
G_K <- Qdist[K==i, K==i]
g <- graph.adjacency(G_K, mode="upper", diag=FALSE, weighted=TRUE)
g <- delete.edges(g, which(E(g)$weight>threshold))
G_clusters[[i]] <- lapply(decompose.graph(g), function(x) V(x)$name)
}
hist(Qdist)
threshold=0.05
K
modest$K
K <- modest$K
G_clusters <- list()
for(i in unique(K)){
G_K <- Qdist[K==i, K==i]
g <- graph.adjacency(G_K, mode="upper", diag=FALSE, weighted=TRUE)
g <- delete.edges(g, which(E(g)$weight>threshold))
G_clusters[[i]] <- lapply(decompose.graph(g), function(x) V(x)$name)
}
G_clusters
i <- 5
i <- 4
G_K <- Qdist[K==i, K==i]
g <- graph.adjacency(G_K, mode="upper", diag=FALSE, weighted=TRUE)
g <- delete.edges(g, which(E(g)$weight>threshold))
plot(g)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
library("MODEST", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.005)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.0075)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
par(mfcol=c(1,3))
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.025")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.005)
title(main="threshold=0.00125")
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
par(mfcol=c(1,3))
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.025)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.025")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.0125)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.00125")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
par(mfcol=c(1,3))
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.025)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.025")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.002)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.00125")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.025)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.04)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.03)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.02)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
0.01/5
par(mfcol=c(1,3))
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.05")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.01")
modest$DAG <- Qdist2KDAG(modest$Qdist_G, modest$K, merge.by="Qdist", threshold=0.002)
modest$plotDAG <- plotKDAG(modest, modest$Qdist_G, modest$DAG)
title(main="threshold=0.002")
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.05)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.01)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.002)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.075)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.1)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.2)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
modest$DAG <- Qdist2KDAG(Qdist_MCMV, modest_MCMV$K, merge.by="Qdist", threshold=0.15)
modest$plotDAG <- plotKDAG(modest_MCMV, Qdist_MCMV, modest$DAG)
new.order <- plotHist(modest_MCMV, modest$plotDAG, 4, sort.by=1) # this functions gives the order which can be used to all subsequent plots
new.order <- plotHist(modest_MCMV, modest$plotDAG, 2, sort.by=1) # this functions gives the order which can be used to all subsequent plots
i <- 4
plotHistogram(i, MOD_data, sort.by=new.order)
plotHist(i, MOD_data, sort.by=new.order)
plotHist(i, modest_MCMV, sort.by=new.order)
plotHist(modest_MCMV, modest$plotDAG, i, sort.by=new.order)
infile <- modest$plotDAG
modest <- modest_MCMV
sort.by=new.order
i
vertices <- infile$vertices
K_vertices <- infile$K_vertices
color <- infile$color
Qcols <- modest$Qcols
temp <- do.call('cbind', lapply(vertices[K_vertices==K], function(x) if(length(x)>1) apply(Qcols[,x], 1, sum) else Qcols[,x]))
K <- i
temp <- do.call('cbind', lapply(vertices[K_vertices==K], function(x) if(length(x)>1) apply(Qcols[,x], 1, sum) else Qcols[,x]))
hist.data <- apply(temp, 1, function(x) x/sum(x))
hist.data
t(hist.data)
write.table(t(hist.data), file="MCMV_hist_K4.txt")
temp <- do.call('cbind', lapply(vertices[K_vertices==K], function(x) if(length(x)>1) apply(Qcols[,x], 1, sum) else Qcols[,x]))
hist.data <- apply(temp, 1, function(x) x/sum(x))
hist.data
barplot(hist.data)
barplot(hist.data, col=color)
barplot(hist.data, col=color, border=NA, space=0, axes=FALSE)
modest <- importData("/Users/petrikemppainen/Desktop/Git/input8_locprior")
modest$K
table(modest$K)
library(Rmodest)
library(Rmodest)
library(Rmodest)
roxygen2::roxygenize('.', roclets=c('rd', 'namespace'))
?roxygenize
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
roxygenize()
roxygenize()
library(Rmodest)
roxygenize()
roxygenize()
roxygenize()
roxygenize()
library(Rmodest)
library(Rmodest)
roxygenize()
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
roxygenize()
library("Rmodest", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
roxygenize()
library(Rmodest)
library(Rmodest)
roxygenize()
library(Rmodest)
file_names <-c("/Users/petrikemppainen/Desktop/Rmodest/input8_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input8_nolocprior",
"/Users/petrikemppainen/Desktop/Rmodest/input9_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input9_nolocprior",
"/Users/petrikemppainen/Desktop/Rmodest/input10_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input12_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input13_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input14_locprior")
par(mfcol=c(2,4))
for(i in 1:8){
temp <- importData(file_names[[i]])
temp2 <- temp$Qcols[,temp$K==2]
plot(temp2[,1], type="l", ylim=c(0,1), ylab="probability", main=strsplit(file_names[[i]], "/")[[1]][6])
apply(temp2, 2, function(x) points(x, type="l"))
}
importedModestData <- list()
for(i in 1:8){
importedModestData[[i]] <-  importData(file_names[[i]])
}
par(mfcol=c(2,4))
for(i in 1:8){
temp <- importedModestData[[i]]
temp2 <- temp$Qcols[,temp$K==2]
plot(temp2[,1], type="l", ylim=c(0,1), ylab="probability", main=strsplit(file_names[[i]], "/")[[1]][6], xlab="individual")
apply(temp2, 2, function(x) points(x, type="l"))
}
importedModestData
i <- 1
temp <- importedModestData[[i]]
temp
temp2 <- temp$Qcols[,temp$K==2]
plot(temp2[,1], type="l", ylim=c(0,1), ylab="probability", main=strsplit(file_names[[i]], "/")[[1]][6], xlab="individual")
apply(temp2, 2, function(x) points(x, type="l"))
for(i in 1:8){
temp <- importedModestData[[i]]
temp2 <- temp$Qcols[,temp$K==2]
plot(temp2[,1], type="l", ylim=c(0,1), ylab="probability", main=strsplit(file_names[[i]], "/")[[1]][6], xlab="individual")
apply(temp2, 2, function(x) points(x, type="l"))
}
par(mfcol=c(2,4))
for(i in 1:8){
temp <- importedModestData[[i]]
temp2 <- temp$Qcols[,temp$K==2]
plot(temp2[,1], type="l", ylim=c(0,1), ylab="probability", main=strsplit(file_names[[i]], "/")[[1]][6], xlab="individual")
apply(temp2, 2, function(x) points(x, type="l"))
}
library(Rmodest)
devtools::install_github("petrikemppainen/Rmodest")
install.packages('devtools')
for(i in 1:8){
importedModestData[[i]] <-  importData(file_names[[i]])
}
par(mfcol=c(2,4))
for(i in 1:8){
temp <- importedModestData[[i]]
temp2 <- temp$Qcols[,temp$K==2]
plot(temp2[,1], type="l", ylim=c(0,1), ylab="probability", main=strsplit(file_names[[i]], "/")[[1]][6], xlab="individual")
apply(temp2, 2, function(x) points(x, type="l"))
}
modest9_locprior <- importedModestData[[3]]
modest9_locprior$Qdist <- getQdist(modest9_locprior, method="G_test")
modest9_locprior$DAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.05)
modest9_locprior$plotDAG <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$DAG)
par(mfcol=c(1,1))
modest9_locprior$DAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.05)
modest9_locprior$plotDAG <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$DAG)
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.001)
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
new.order <- plotHist(modest9_locprior, modest9_locprior$plotDAG, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$plotDAG, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
par(mfcol=c(2,2))
# first plot histogram at K=2. Order infividuals by first Qcolumn and save this order for histograms att K=2-5 as well.
new.order <- plotHist(modest9_locprior, modest9_locprior$plotDAG, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$plotDAG, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.05)
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
# Now plot histograms
par(mfcol=c(2,2))
# first plot histogram at K=2. Order infividuals by first Qcolumn and save this order for histograms att K=2-5 as well.
new.order <- plotHist(modest9_locprior, modest9_locprior$plotDAG, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$plotDAG, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
par(mfcol=c(2,2))
# first plot histogram at K=2. Order infividuals by first Qcolumn and save this order for histograms att K=2-5 as well.
new.order <- plotHist(modest9_locprior, modest9_locprior$KDAGplot, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$KDAGplot, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.05)
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
# Now plot histograms
par(mfcol=c(2,2))
# first plot histogram at K=2. Order infividuals by first Qcolumn and save this order for histograms att K=2-5 as well.
new.order <- plotHist(modest9_locprior, modest9_locprior$KDAGplot, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$KDAGplot, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
par(mfcol=c(2,2))
file_names <-c("/Users/petrikemppainen/Desktop/Rmodest/input8_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input8_nolocprior",
"/Users/petrikemppainen/Desktop/Rmodest/input9_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input9_nolocprior",
"/Users/petrikemppainen/Desktop/Rmodest/input10_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input12_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input13_locprior",
"/Users/petrikemppainen/Desktop/Rmodest/input14_locprior")
importedModestData <- list()
for(i in 1:8){
importedModestData[[i]] <-  importData(file_names[[i]])
}
names(importedModestData[[1]])
names(importedModestData[[1]])[[1]][1:5, 1:5]
names(importedModestData[[1]])[[1]]
importedModestData[[1]][[1]][1:5, 1:5]
importedModestData[[1]]$Qcols[1:5, 1:5]
importedModestData[[1]]$K
importedModestData[[1]]$f_file
names(importedModestData[[1]])
importedModestData[[1]]$allele_counts
dim(importedModestData[[1]]$Qcols)
names(importedModestData[[1]])
table(importedModestData[[1]]$K) # how many replicats for each K?
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.01)
par(mfcol=c(2,4))
for(i in 1:8){
temp <- importedModestData[[i]] # get infile
temp2 <- temp$Qcols[,temp$K==2] # I'm only interested in Qcols at K=2
plot(temp2[,1], type="l", ylim=c(0,1), ylab="probability", main=strsplit(file_names[[i]], "/")[[1]][6], xlab="individual") # plot first column
apply(temp2, 2, function(x) points(x, type="l")) # then add lines for the remaining columns
}
modest9_locprior <- importedModestData[[3]]
modest9_locprior$Qdist <- getQdist(modest9_locprior, method="G_test")
getQdist(modest9_locprior, method="G_test", mc.cores=2)
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.01)
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
par(mfcol=c(2,2))
par(mfcol=c(1,1))
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
par(mfcol=c(2,2))
new.order <- plotHist(modest9_locprior, modest9_locprior$KDAGplot, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$KDAGplot, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.001)
par(mfcol=c(1,1))
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
# Now plot histograms
par(mfcol=c(2,2))
# first plot histogram at K=2. Order infividuals by first Qcolumn and save this order for histograms att K=2-5 as well.
new.order <- plotHist(modest9_locprior, modest9_locprior$KDAGplot, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$KDAGplot, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.05)
par(mfcol=c(1,1))
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
# Now plot histograms
par(mfcol=c(2,2))
# first plot histogram at K=2. Order infividuals by first Qcolumn and save this order for histograms att K=2-5 as well.
new.order <- plotHist(modest9_locprior, modest9_locprior$KDAGplot, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$KDAGplot, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
# now go back to "Qdist2KDAG" and change the threshold to something lower to see what happens
par(mfcol=c(1,1))
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
par(mfcol=c(2,5))
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.05)
#par(mfcol=c(1,1))
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
# Now plot histograms
par(mfcol=c(2,5))
# first plot histogram at K=2. Order infividuals by first Qcolumn and save this order for histograms att K=2-5 as well.
new.order <- plotHist(modest9_locprior, modest9_locprior$KDAGplot, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$KDAGplot, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
par(mfcol=c(5,2))
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.05)
#par(mfcol=c(1,1))
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
# Now plot histograms
#par(mfcol=c(5,2))
# first plot histogram at K=2. Order infividuals by first Qcolumn and save this order for histograms att K=2-5 as well.
new.order <- plotHist(modest9_locprior, modest9_locprior$KDAGplot, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$KDAGplot, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
# now go back to "Qdist2KDAG" and change the threshold to something lower to see what happens
modest9_locprior$KDAG <- Qdist2KDAG(modest9_locprior$Qdist, modest9_locprior$K, merge.by="Qdist", threshold=0.005)
#par(mfcol=c(1,1))
modest9_locprior$KDAGplot <- plotKDAG(modest9_locprior, modest9_locprior$Qdist, modest9_locprior$KDAG)
# Now plot histograms
#par(mfcol=c(5,2))
# first plot histogram at K=2. Order infividuals by first Qcolumn and save this order for histograms att K=2-5 as well.
new.order <- plotHist(modest9_locprior, modest9_locprior$KDAGplot, 2, sort.by=1)
title(main=paste("K=", 2, sep=""))
# Because there is multimodality the histogram looks like art!! :)
# now plot the rest (keeping the order the same as above, by defining "sort.by")
for(i in 3:5){
plotHist(modest9_locprior, modest9_locprior$KDAGplot, i, sort.by=new.order)
title(main=paste("K=", i, sep=""))
}
# now go back to "Qdist2KDAG" and change the threshold to something lower to see what happens
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
devtools::install_github("petrikemppainen/Rmodest")
install.packages('devtools')
devtools::install_github("petrikemppainen/Rmodest")
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(Rmodest)
devtools::install_github("petrikemppainen/Rmodest")
devtools::install_github("petrikemppainen/LDna")
library(Rmodest)
install.packages("testthat")
check()
test()
library(devtools)
test()
test()
library(testthat)
test_check("<Rmodest>")
library(Rmodest)
library(Rmodest)
test_check("<Rmodest>")
test()
check()
install.packages("roxygen2")
check()
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("knitr")
check()
check()
check()
test_check("<Rmodest>")
test_check("Rmodest")
test_check("Rmodest")
